# -*- coding: utf-8 -*-
"""SentinelWorkflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OiEo4kzvo5XxZqJlqwOSGSNlNOdAw2ag

****Sentinel 2 Worflow****

This workflow loops over all rectangles of the csv and converts them to ee.Geomtries.
It will find all Sentinel 2 images in a given timefrime that have a cloud coverage less than X and stores their IDs in list.

A nested loop will run over all these images of the list and atmospherically corrects them to Sentinel 2A Level. All corrected images are stored in a new Image Collection upon which a Cloud Mask is applied. 
Lastly, the image is calculated with the median of the collection and then exported to the drive (Bands: B2, B3, B4, B8 and B11).
Alternatively, instead of the mean one could also apply a mosaic.
Atmospheric correction is performed based on Py6S (wilson, 2013) and Murphy (2018) Atmospheric script. Marked functions are adopted from Murphy (2018)


This jupyter-notebook was written and executed in Google Colab. All files are written to the authors personal drive.

Murphy, S. (2018), ‘Sam Murphy Github’.
URL: https://github.com/samsammurphy?tab=repositories

Wilson, R. T. (2013), ‘Py6s: A python interface to the 6s radiative transfer model.’,Computers & Geosciences51(2), 166

Script put together by Johanna Kauffert
"""

import ee
from ee import batch
from IPython.display import display, Image

# Install Py6s which is not pre installed on Colab
#Credits to Robin Wilson for this package
!pip install Py6S
!wget http://rtwilson.com/downloads/sixsV1.1 -O /usr/local/bin/sixsV1.1
!chmod a+x /usr/local/bin/sixsV1.1
!apt-get install libgfortran3
from Py6S import *

#import other packages
import datetime
import math
import os
import sys

from google.colab import drive
drive.mount('/gdrive/')
sys.path.append('/gdrive/My Drive/Colab Notebooks')
from atmosphere import Atmospheric # Murphy 2018
# Trigger the authentication flow.
ee.Authenticate()

ee.Initialize()

def spectralResponseFunction(bandname):
    """
    Extract spectral response function for given band name
    Function by Sam Murphy
    """

    bandSelect = {
        'B1':PredefinedWavelengths.S2A_MSI_01,
        'B2':PredefinedWavelengths.S2A_MSI_02,
        'B3':PredefinedWavelengths.S2A_MSI_03,
        'B4':PredefinedWavelengths.S2A_MSI_04,
        'B5':PredefinedWavelengths.S2A_MSI_05,
        'B6':PredefinedWavelengths.S2A_MSI_06,
        'B7':PredefinedWavelengths.S2A_MSI_07,
        'B8':PredefinedWavelengths.S2A_MSI_08,
        'B8A':PredefinedWavelengths.S2A_MSI_8A,
        'B9':PredefinedWavelengths.S2A_MSI_09,
        'B10':PredefinedWavelengths.S2A_MSI_10,
        'B11':PredefinedWavelengths.S2A_MSI_11,
        'B12':PredefinedWavelengths.S2A_MSI_12,
        }
    
    return Wavelength(bandSelect[bandname])

def toa_to_rad(bandname):
    """
    Converts top of atmosphere reflectance to at-sensor radiance
    Function by Sam Murphy
    """
    # solar exoatmospheric spectral irradiance
    ESUN = info['SOLAR_IRRADIANCE_'+bandname]
    solar_angle_correction = math.cos(math.radians(solar_z))
    
    # Earth-Sun distance (from day of year)
    doy = scene_date.timetuple().tm_yday
    d = 1 - 0.01672 * math.cos(0.9856 * (doy-4))# http://physics.stackexchange.com/questions/177949/earth-sun-distance-on-a-given-day-of-the-year
   
    # conversion factor
    multiplier = ESUN*solar_angle_correction/(math.pi*d**2)

    # at-sensor radiance
    rad = toa.select(bandname).multiply(multiplier)
    
    return rad

def surface_reflectance(bandname):
    """
    Calculate surface reflectance from at-sensor radiance given waveband name
    Function by Sam Murphy
    """

    # run 6S for this waveband
    s.wavelength = spectralResponseFunction(bandname)
    s.run()
    
    # extract 6S outputs
    Edir = s.outputs.direct_solar_irradiance             #direct solar irradiance
    Edif = s.outputs.diffuse_solar_irradiance            #diffuse solar irradiance
    Lp   = s.outputs.atmospheric_intrinsic_radiance      #path radiance
    absorb  = s.outputs.trans['global_gas'].upward       #absorption transmissivity
    scatter = s.outputs.trans['total_scattering'].upward #scattering transmissivity
    tau2 = absorb*scatter                                #total transmissivity
    
    # radiance to surface reflectance
    rad = toa_to_rad(bandname)
    ref = rad.subtract(Lp).multiply(math.pi).divide(tau2*(Edir+Edif))
    
    return ref

# Sam Murphy

def ESAclouds(toa):
    """
    European Space Agency (ESA) clouds from 'QA60', i.e. Quality Assessment band at 60m
    parsed by Nick Clinton
    Function by Sam Murphy
    """

    qa = toa.select('QA60')

    # bits 10 and 11 are clouds and cirrus
    cloudBitMask = int(2**10)
    cirrusBitMask = int(2**11)

    # both flags set to zero indicates clear conditions.
    clear = qa.bitwiseAnd(cloudBitMask).eq(0).And(\
           qa.bitwiseAnd(cirrusBitMask).eq(0))

    # cloud is not clear
    cloud = clear.eq(0)

    return cloud

def shadowMask(toa,cloudMask):
    """
    Finds cloud shadows in images
    Originally by Gennadii Donchyts, adapted by Ian Housman
    Function by Sam Murphy
    """

    def potentialShadow(cloudHeight):
        """
        Finds potential shadow areas from array of cloud heights
        returns an image stack (i.e. list of images) 
        """
        cloudHeight = ee.Number(cloudHeight)

        # shadow vector length
        shadowVector = zenith.tan().multiply(cloudHeight)

        # x and y components of shadow vector length
        x = azimuth.cos().multiply(shadowVector).divide(nominalScale).round()
        y = azimuth.sin().multiply(shadowVector).divide(nominalScale).round()

        # affine translation of clouds
        cloudShift = cloudMask.changeProj(cloudMask.projection(), cloudMask.projection().translate(x, y)) # could incorporate shadow stretch?

        return cloudShift

    # solar geometry (radians)
    azimuth = ee.Number(toa.get('solar_azimuth')).multiply(math.pi).divide(180.0).add(ee.Number(0.5).multiply(math.pi))
    zenith  = ee.Number(0.5).multiply(math.pi ).subtract(ee.Number(toa.get('solar_zenith')).multiply(math.pi).divide(180.0))

    # find potential shadow areas based on cloud and solar geometry
    nominalScale = cloudMask.projection().nominalScale()
    cloudHeights = ee.List.sequence(500,4000,500)        
    potentialShadowStack = cloudHeights.map(potentialShadow)
    potentialShadow = ee.ImageCollection.fromImages(potentialShadowStack).max()

    # shadows are not clouds
    potentialShadow = potentialShadow.And(cloudMask.Not())

    # (modified) dark pixel detection 
    darkPixels = toa.normalizedDifference(['green', 'swir1']).gt(0.25)

    # shadows are dark
    shadow = potentialShadow.And(darkPixels).rename(['shadows'])

    return shadow
  

ESAclouds = ESAclouds
shadowMask = shadowMask


def sentinel2mask(img):
  """
  Masks cloud (and shadow) pixels from Sentinel 2 image
  Function by Sam Murphy
  """

  # top of atmosphere reflectance
  toa = img.select(['B1','B2','B3','B4','B6','B8','B8A','B9','B10', 'B11', 'B12'],\
    ['aerosol', 'blue', 'green', 'red', 'red2','red3','red4','h2o', 'cirrus','swir1', 'swir2'])\
    .divide(10000).addBands(img.select('QA60'))\
    .set('solar_azimuth',img.get('MEAN_SOLAR_AZIMUTH_ANGLE'))\
    .set('solar_zenith',img.get('MEAN_SOLAR_ZENITH_ANGLE'))
                
  # ESA clouds
  ESAcloud = ESAclouds(toa)

  # Shadow
  shadow = shadowMask(toa, ESAcloud)

  # cloud and shadow mask
  mask = ESAcloud.Or(shadow).eq(0)

  return img.updateMask(mask).toFloat()

# sepcify a list of polygons that will be used as areas of interest. The wkt list are the 96 polygons of Uganda
#
wkt_liste = [[[29.510949100000005, -1.5210635559999999], [29.510949100000005, -1.034092893], [30.04218312, -1.034092893], [30.04218312, -1.5210635559999999], [29.510949100000005, -1.5210635559999999]], [[30.04218312, -1.5210635559999999], [30.04218312, -1.034092893], [30.57341714, -1.034092893], [30.57341714, -1.5210635559999999], [30.04218312, -1.5210635559999999]], [[30.57341714, -1.5210635559999999], [30.57341714, -1.034092893], [31.10465116, -1.034092893], [31.10465116, -1.5210635559999999], [30.57341714, -1.5210635559999999]], [[29.510949100000005, -1.034092893], [29.510949100000005, -0.547122231], [30.04218312, -0.547122231], [30.04218312, -1.034092893], [29.510949100000005, -1.034092893]], [[30.04218312, -1.034092893], [30.04218312, -0.547122231], [30.57341714, -0.547122231], [30.57341714, -1.034092893], [30.04218312, -1.034092893]], [[30.57341714, -1.034092893], [30.57341714, -0.547122231], [31.10465116, -0.547122231], [31.10465116, -1.034092893], [30.57341714, -1.034092893]], [[31.10465116, -1.034092893], [31.10465116, -0.547122231], [31.63588518, -0.547122231], [31.63588518, -1.034092893], [31.10465116, -1.034092893]], [[31.63588518, -1.034092893], [31.63588518, -0.547122231], [32.167119199999995, -0.547122231], [32.167119199999995, -1.034092893], [31.63588518, -1.034092893]], [[32.167119199999995, -1.034092893], [32.167119199999995, -0.547122231], [32.69835322, -0.547122231], [32.69835322, -1.034092893], [32.167119199999995, -1.034092893]], [[32.69835322, -1.034092893], [32.69835322, -0.547122231], [33.22958724, -0.547122231], [33.22958724, -1.034092893], [32.69835322, -1.034092893]], [[33.22958724, -1.034092893], [33.22958724, -0.547122231], [33.76082126, -0.547122231], [33.76082126, -1.034092893], [33.22958724, -1.034092893]], [[33.76082126, -1.034092893], [33.76082126, -0.547122231], [34.29205528, -0.547122231], [34.29205528, -1.034092893], [33.76082126, -1.034092893]], [[29.510949100000005, -0.547122231], [29.510949100000005, -0.060151569], [30.04218312, -0.060151569], [30.04218312, -0.547122231], [29.510949100000005, -0.547122231]], [[30.04218312, -0.547122231], [30.04218312, -0.060151569], [30.57341714, -0.060151569], [30.57341714, -0.547122231], [30.04218312, -0.547122231]], [[30.57341714, -0.547122231], [30.57341714, -0.060151569], [31.10465116, -0.060151569], [31.10465116, -0.547122231], [30.57341714, -0.547122231]], [[31.10465116, -0.547122231], [31.10465116, -0.060151569], [31.63588518, -0.060151569], [31.63588518, -0.547122231], [31.10465116, -0.547122231]], [[31.63588518, -0.547122231], [31.63588518, -0.060151569], [32.167119199999995, -0.060151569], [32.167119199999995, -0.547122231], [31.63588518, -0.547122231]], [[32.167119199999995, -0.547122231], [32.167119199999995, -0.060151569], [32.69835322, -0.060151569], [32.69835322, -0.547122231], [32.167119199999995, -0.547122231]], [[32.69835322, -0.547122231], [32.69835322, -0.060151569], [33.22958724, -0.060151569], [33.22958724, -0.547122231], [32.69835322, -0.547122231]], [[33.22958724, -0.547122231], [33.22958724, -0.060151569], [33.76082126, -0.060151569], [33.76082126, -0.547122231], [33.22958724, -0.547122231]], [[33.76082126, -0.547122231], [33.76082126, -0.060151569], [34.29205528, -0.060151569], [34.29205528, -0.547122231], [33.76082126, -0.547122231]], [[29.510949100000005, -0.060151569], [29.510949100000005, 0.426819093], [30.04218312, 0.426819093], [30.04218312, -0.060151569], [29.510949100000005, -0.060151569]], [[30.04218312, -0.060151569], [30.04218312, 0.426819093], [30.57341714, 0.426819093], [30.57341714, -0.060151569], [30.04218312, -0.060151569]], [[30.57341714, -0.060151569], [30.57341714, 0.426819093], [31.10465116, 0.426819093], [31.10465116, -0.060151569], [30.57341714, -0.060151569]], [[31.10465116, -0.060151569], [31.10465116, 0.426819093], [31.63588518, 0.426819093], [31.63588518, -0.060151569], [31.10465116, -0.060151569]], [[31.63588518, -0.060151569], [31.63588518, 0.426819093], [32.167119199999995, 0.426819093], [32.167119199999995, -0.060151569], [31.63588518, -0.060151569]], [[32.167119199999995, -0.060151569], [32.167119199999995, 0.426819093], [32.69835322, 0.426819093], [32.69835322, -0.060151569], [32.167119199999995, -0.060151569]], [[32.69835322, -0.060151569], [32.69835322, 0.426819093], [33.22958724, 0.426819093], [33.22958724, -0.060151569], [32.69835322, -0.060151569]], [[33.22958724, -0.060151569], [33.22958724, 0.426819093], [33.76082126, 0.426819093], [33.76082126, -0.060151569], [33.22958724, -0.060151569]], [[33.76082126, -0.060151569], [33.76082126, 0.426819093], [34.29205528, 0.426819093], [34.29205528, -0.060151569], [33.76082126, -0.060151569]], [[29.510949100000005, 0.426819093], [29.510949100000005, 0.913789755], [30.04218312, 0.913789755], [30.04218312, 0.426819093], [29.510949100000005, 0.426819093]], [[30.04218312, 0.426819093], [30.04218312, 0.913789755], [30.57341714, 0.913789755], [30.57341714, 0.426819093], [30.04218312, 0.426819093]], [[30.57341714, 0.426819093], [30.57341714, 0.913789755], [31.10465116, 0.913789755], [31.10465116, 0.426819093], [30.57341714, 0.426819093]], [[31.10465116, 0.426819093], [31.10465116, 0.913789755], [31.63588518, 0.913789755], [31.63588518, 0.426819093], [31.10465116, 0.426819093]], [[31.63588518, 0.426819093], [31.63588518, 0.913789755], [32.167119199999995, 0.913789755], [32.167119199999995, 0.426819093], [31.63588518, 0.426819093]], [[32.167119199999995, 0.426819093], [32.167119199999995, 0.913789755], [32.69835322, 0.913789755], [32.69835322, 0.426819093], [32.167119199999995, 0.426819093]], [[32.69835322, 0.426819093], [32.69835322, 0.913789755], [33.22958724, 0.913789755], [33.22958724, 0.426819093], [32.69835322, 0.426819093]], [[33.22958724, 0.426819093], [33.22958724, 0.913789755], [33.76082126, 0.913789755], [33.76082126, 0.426819093], [33.22958724, 0.426819093]], [[33.76082126, 0.426819093], [33.76082126, 0.913789755], [34.29205528, 0.913789755], [34.29205528, 0.426819093], [33.76082126, 0.426819093]], [[34.29205528, 0.426819093], [34.29205528, 0.913789755], [34.8232893, 0.913789755], [34.8232893, 0.426819093], [34.29205528, 0.426819093]], [[30.04218312, 0.913789755], [30.04218312, 1.4007604169999999], [30.57341714, 1.4007604169999999], [30.57341714, 0.913789755], [30.04218312, 0.913789755]], [[30.57341714, 0.913789755], [30.57341714, 1.4007604169999999], [31.10465116, 1.4007604169999999], [31.10465116, 0.913789755], [30.57341714, 0.913789755]], [[31.10465116, 0.913789755], [31.10465116, 1.4007604169999999], [31.63588518, 1.4007604169999999], [31.63588518, 0.913789755], [31.10465116, 0.913789755]], [[31.63588518, 0.913789755], [31.63588518, 1.4007604169999999], [32.167119199999995, 1.4007604169999999], [32.167119199999995, 0.913789755], [31.63588518, 0.913789755]], [[32.167119199999995, 0.913789755], [32.167119199999995, 1.4007604169999999], [32.69835322, 1.4007604169999999], [32.69835322, 0.913789755], [32.167119199999995, 0.913789755]], [[32.69835322, 0.913789755], [32.69835322, 1.4007604169999999], [33.22958724, 1.4007604169999999], [33.22958724, 0.913789755], [32.69835322, 0.913789755]], [[33.22958724, 0.913789755], [33.22958724, 1.4007604169999999], [33.76082126, 1.4007604169999999], [33.76082126, 0.913789755], [33.22958724, 0.913789755]], [[33.76082126, 0.913789755], [33.76082126, 1.4007604169999999], [34.29205528, 1.4007604169999999], [34.29205528, 0.913789755], [33.76082126, 0.913789755]], [[34.29205528, 0.913789755], [34.29205528, 1.4007604169999999], [34.8232893, 1.4007604169999999], [34.8232893, 0.913789755], [34.29205528, 0.913789755]], [[34.8232893, 0.913789755], [34.8232893, 1.4007604169999999], [35.35452332, 1.4007604169999999], [35.35452332, 0.913789755], [34.8232893, 0.913789755]], [[30.57341714, 1.4007604169999999], [30.57341714, 1.8877310790000001], [31.10465116, 1.8877310790000001], [31.10465116, 1.4007604169999999], [30.57341714, 1.4007604169999999]], [[31.10465116, 1.4007604169999999], [31.10465116, 1.8877310790000001], [31.63588518, 1.8877310790000001], [31.63588518, 1.4007604169999999], [31.10465116, 1.4007604169999999]], [[31.63588518, 1.4007604169999999], [31.63588518, 1.8877310790000001], [32.167119199999995, 1.8877310790000001], [32.167119199999995, 1.4007604169999999], [31.63588518, 1.4007604169999999]], [[32.167119199999995, 1.4007604169999999], [32.167119199999995, 1.8877310790000001], [32.69835322, 1.8877310790000001], [32.69835322, 1.4007604169999999], [32.167119199999995, 1.4007604169999999]], [[32.69835322, 1.4007604169999999], [32.69835322, 1.8877310790000001], [33.22958724, 1.8877310790000001], [33.22958724, 1.4007604169999999], [32.69835322, 1.4007604169999999]], [[33.22958724, 1.4007604169999999], [33.22958724, 1.8877310790000001], [33.76082126, 1.8877310790000001], [33.76082126, 1.4007604169999999], [33.22958724, 1.4007604169999999]], [[33.76082126, 1.4007604169999999], [33.76082126, 1.8877310790000001], [34.29205528, 1.8877310790000001], [34.29205528, 1.4007604169999999], [33.76082126, 1.4007604169999999]], [[34.29205528, 1.4007604169999999], [34.29205528, 1.8877310790000001], [34.8232893, 1.8877310790000001], [34.8232893, 1.4007604169999999], [34.29205528, 1.4007604169999999]], [[34.8232893, 1.4007604169999999], [34.8232893, 1.8877310790000001], [35.35452332, 1.8877310790000001], [35.35452332, 1.4007604169999999], [34.8232893, 1.4007604169999999]], [[30.57341714, 1.8877310790000001], [30.57341714, 2.374701741], [31.10465116, 2.374701741], [31.10465116, 1.8877310790000001], [30.57341714, 1.8877310790000001]], [[31.10465116, 1.8877310790000001], [31.10465116, 2.374701741], [31.63588518, 2.374701741], [31.63588518, 1.8877310790000001], [31.10465116, 1.8877310790000001]], [[31.63588518, 1.8877310790000001], [31.63588518, 2.374701741], [32.167119199999995, 2.374701741], [32.167119199999995, 1.8877310790000001], [31.63588518, 1.8877310790000001]], [[32.167119199999995, 1.8877310790000001], [32.167119199999995, 2.374701741], [32.69835322, 2.374701741], [32.69835322, 1.8877310790000001], [32.167119199999995, 1.8877310790000001]], [[32.69835322, 1.8877310790000001], [32.69835322, 2.374701741], [33.22958724, 2.374701741], [33.22958724, 1.8877310790000001], [32.69835322, 1.8877310790000001]], [[33.22958724, 1.8877310790000001], [33.22958724, 2.374701741], [33.76082126, 2.374701741], [33.76082126, 1.8877310790000001], [33.22958724, 1.8877310790000001]], [[33.76082126, 1.8877310790000001], [33.76082126, 2.374701741], [34.29205528, 2.374701741], [34.29205528, 1.8877310790000001], [33.76082126, 1.8877310790000001]], [[34.29205528, 1.8877310790000001], [34.29205528, 2.374701741], [34.8232893, 2.374701741], [34.8232893, 1.8877310790000001], [34.29205528, 1.8877310790000001]], [[34.8232893, 1.8877310790000001], [34.8232893, 2.374701741], [35.35452332, 2.374701741], [35.35452332, 1.8877310790000001], [34.8232893, 1.8877310790000001]], [[30.57341714, 2.374701741], [30.57341714, 2.861672403], [31.10465116, 2.861672403], [31.10465116, 2.374701741], [30.57341714, 2.374701741]], [[31.10465116, 2.374701741], [31.10465116, 2.861672403], [31.63588518, 2.861672403], [31.63588518, 2.374701741], [31.10465116, 2.374701741]], [[31.63588518, 2.374701741], [31.63588518, 2.861672403], [32.167119199999995, 2.861672403], [32.167119199999995, 2.374701741], [31.63588518, 2.374701741]], [[32.167119199999995, 2.374701741], [32.167119199999995, 2.861672403], [32.69835322, 2.861672403], [32.69835322, 2.374701741], [32.167119199999995, 2.374701741]], [[32.69835322, 2.374701741], [32.69835322, 2.861672403], [33.22958724, 2.861672403], [33.22958724, 2.374701741], [32.69835322, 2.374701741]], [[33.22958724, 2.374701741], [33.22958724, 2.861672403], [33.76082126, 2.861672403], [33.76082126, 2.374701741], [33.22958724, 2.374701741]], [[33.76082126, 2.374701741], [33.76082126, 2.861672403], [34.29205528, 2.861672403], [34.29205528, 2.374701741], [33.76082126, 2.374701741]], [[34.29205528, 2.374701741], [34.29205528, 2.861672403], [34.8232893, 2.861672403], [34.8232893, 2.374701741], [34.29205528, 2.374701741]], [[34.8232893, 2.374701741], [34.8232893, 2.861672403], [35.35452332, 2.861672403], [35.35452332, 2.374701741], [34.8232893, 2.374701741]], [[30.57341714, 2.861672403], [30.57341714, 3.348643065], [31.10465116, 3.348643065], [31.10465116, 2.861672403], [30.57341714, 2.861672403]], [[31.10465116, 2.861672403], [31.10465116, 3.348643065], [31.63588518, 3.348643065], [31.63588518, 2.861672403], [31.10465116, 2.861672403]], [[31.63588518, 2.861672403], [31.63588518, 3.348643065], [32.167119199999995, 3.348643065], [32.167119199999995, 2.861672403], [31.63588518, 2.861672403]], [[32.167119199999995, 2.861672403], [32.167119199999995, 3.348643065], [32.69835322, 3.348643065], [32.69835322, 2.861672403], [32.167119199999995, 2.861672403]], [[32.69835322, 2.861672403], [32.69835322, 3.348643065], [33.22958724, 3.348643065], [33.22958724, 2.861672403], [32.69835322, 2.861672403]], [[33.22958724, 2.861672403], [33.22958724, 3.348643065], [33.76082126, 3.348643065], [33.76082126, 2.861672403], [33.22958724, 2.861672403]], [[33.76082126, 2.861672403], [33.76082126, 3.348643065], [34.29205528, 3.348643065], [34.29205528, 2.861672403], [33.76082126, 2.861672403]], [[34.29205528, 2.861672403], [34.29205528, 3.348643065], [34.8232893, 3.348643065], [34.8232893, 2.861672403], [34.29205528, 2.861672403]], [[30.57341714, 3.348643065], [30.57341714, 3.8356137269999997], [31.10465116, 3.8356137269999997], [31.10465116, 3.348643065], [30.57341714, 3.348643065]], [[31.10465116, 3.348643065], [31.10465116, 3.8356137269999997], [31.63588518, 3.8356137269999997], [31.63588518, 3.348643065], [31.10465116, 3.348643065]], [[31.63588518, 3.348643065], [31.63588518, 3.8356137269999997], [32.167119199999995, 3.8356137269999997], [32.167119199999995, 3.348643065], [31.63588518, 3.348643065]], [[32.167119199999995, 3.348643065], [32.167119199999995, 3.8356137269999997], [32.69835322, 3.8356137269999997], [32.69835322, 3.348643065], [32.167119199999995, 3.348643065]], [[32.69835322, 3.348643065], [32.69835322, 3.8356137269999997], [33.22958724, 3.8356137269999997], [33.22958724, 3.348643065], [32.69835322, 3.348643065]], [[33.22958724, 3.348643065], [33.22958724, 3.8356137269999997], [33.76082126, 3.8356137269999997], [33.76082126, 3.348643065], [33.22958724, 3.348643065]], [[33.76082126, 3.348643065], [33.76082126, 3.8356137269999997], [34.29205528, 3.8356137269999997], [34.29205528, 3.348643065], [33.76082126, 3.348643065]], [[34.29205528, 3.348643065], [34.29205528, 3.8356137269999997], [34.8232893, 3.8356137269999997], [34.8232893, 3.348643065], [34.29205528, 3.348643065]], [[32.69835322, 3.8356137269999997], [32.69835322, 4.322584389], [33.22958724, 4.322584389], [33.22958724, 3.8356137269999997], [32.69835322, 3.8356137269999997]], [[33.22958724, 3.8356137269999997], [33.22958724, 4.322584389], [33.76082126, 4.322584389], [33.76082126, 3.8356137269999997], [33.22958724, 3.8356137269999997]], [[33.76082126, 3.8356137269999997], [33.76082126, 4.322584389], [34.29205528, 4.322584389], [34.29205528, 3.8356137269999997], [33.76082126, 3.8356137269999997]]] 
wkt_liste = [[[29.495949100000004, -1.5360635559999998], [29.495949100000004, -1.019092893], [30.05718312, -1.019092893], [30.05718312, -1.5360635559999998], [29.495949100000004, -1.5360635559999998]], [[30.02718312, -1.5360635559999998], [30.02718312, -1.019092893], [30.58841714, -1.019092893], [30.58841714, -1.5360635559999998], [30.02718312, -1.5360635559999998]], [[30.55841714, -1.5360635559999998], [30.55841714, -1.019092893], [31.11965116, -1.019092893], [31.11965116, -1.5360635559999998], [30.55841714, -1.5360635559999998]], [[29.495949100000004, -1.0490928929999999], [29.495949100000004, -0.532122231], [30.05718312, -0.532122231], [30.05718312, -1.0490928929999999], [29.495949100000004, -1.0490928929999999]], [[30.02718312, -1.0490928929999999], [30.02718312, -0.532122231], [30.58841714, -0.532122231], [30.58841714, -1.0490928929999999], [30.02718312, -1.0490928929999999]], [[30.55841714, -1.0490928929999999], [30.55841714, -0.532122231], [31.11965116, -0.532122231], [31.11965116, -1.0490928929999999], [30.55841714, -1.0490928929999999]], [[31.08965116, -1.0490928929999999], [31.08965116, -0.532122231], [31.65088518, -0.532122231], [31.65088518, -1.0490928929999999], [31.08965116, -1.0490928929999999]], [[31.62088518, -1.0490928929999999], [31.62088518, -0.532122231], [32.182119199999995, -0.532122231], [32.182119199999995, -1.0490928929999999], [31.62088518, -1.0490928929999999]], [[32.152119199999994, -1.0490928929999999], [32.152119199999994, -0.532122231], [32.71335322, -0.532122231], [32.71335322, -1.0490928929999999], [32.152119199999994, -1.0490928929999999]], [[32.68335322, -1.0490928929999999], [32.68335322, -0.532122231], [33.24458724, -0.532122231], [33.24458724, -1.0490928929999999], [32.68335322, -1.0490928929999999]], [[33.21458724, -1.0490928929999999], [33.21458724, -0.532122231], [33.77582126, -0.532122231], [33.77582126, -1.0490928929999999], [33.21458724, -1.0490928929999999]], [[33.74582126, -1.0490928929999999], [33.74582126, -0.532122231], [34.30705528, -0.532122231], [34.30705528, -1.0490928929999999], [33.74582126, -1.0490928929999999]], [[29.495949100000004, -0.562122231], [29.495949100000004, -0.045151569], [30.05718312, -0.045151569], [30.05718312, -0.562122231], [29.495949100000004, -0.562122231]], [[30.02718312, -0.562122231], [30.02718312, -0.045151569], [30.58841714, -0.045151569], [30.58841714, -0.562122231], [30.02718312, -0.562122231]], [[30.55841714, -0.562122231], [30.55841714, -0.045151569], [31.11965116, -0.045151569], [31.11965116, -0.562122231], [30.55841714, -0.562122231]], [[31.08965116, -0.562122231], [31.08965116, -0.045151569], [31.65088518, -0.045151569], [31.65088518, -0.562122231], [31.08965116, -0.562122231]], [[31.62088518, -0.562122231], [31.62088518, -0.045151569], [32.182119199999995, -0.045151569], [32.182119199999995, -0.562122231], [31.62088518, -0.562122231]], [[32.152119199999994, -0.562122231], [32.152119199999994, -0.045151569], [32.71335322, -0.045151569], [32.71335322, -0.562122231], [32.152119199999994, -0.562122231]], [[32.68335322, -0.562122231], [32.68335322, -0.045151569], [33.24458724, -0.045151569], [33.24458724, -0.562122231], [32.68335322, -0.562122231]], [[33.21458724, -0.562122231], [33.21458724, -0.045151569], [33.77582126, -0.045151569], [33.77582126, -0.562122231], [33.21458724, -0.562122231]], [[33.74582126, -0.562122231], [33.74582126, -0.045151569], [34.30705528, -0.045151569], [34.30705528, -0.562122231], [33.74582126, -0.562122231]], [[29.495949100000004, -0.075151569], [29.495949100000004, 0.441819093], [30.05718312, 0.441819093], [30.05718312, -0.075151569], [29.495949100000004, -0.075151569]], [[30.02718312, -0.075151569], [30.02718312, 0.441819093], [30.58841714, 0.441819093], [30.58841714, -0.075151569], [30.02718312, -0.075151569]], [[30.55841714, -0.075151569], [30.55841714, 0.441819093], [31.11965116, 0.441819093], [31.11965116, -0.075151569], [30.55841714, -0.075151569]], [[31.08965116, -0.075151569], [31.08965116, 0.441819093], [31.65088518, 0.441819093], [31.65088518, -0.075151569], [31.08965116, -0.075151569]], [[31.62088518, -0.075151569], [31.62088518, 0.441819093], [32.182119199999995, 0.441819093], [32.182119199999995, -0.075151569], [31.62088518, -0.075151569]], [[32.152119199999994, -0.075151569], [32.152119199999994, 0.441819093], [32.71335322, 0.441819093], [32.71335322, -0.075151569], [32.152119199999994, -0.075151569]], [[32.68335322, -0.075151569], [32.68335322, 0.441819093], [33.24458724, 0.441819093], [33.24458724, -0.075151569], [32.68335322, -0.075151569]], [[33.21458724, -0.075151569], [33.21458724, 0.441819093], [33.77582126, 0.441819093], [33.77582126, -0.075151569], [33.21458724, -0.075151569]], [[33.74582126, -0.075151569], [33.74582126, 0.441819093], [34.30705528, 0.441819093], [34.30705528, -0.075151569], [33.74582126, -0.075151569]], [[29.495949100000004, 0.41181909299999997], [29.495949100000004, 0.928789755], [30.05718312, 0.928789755], [30.05718312, 0.41181909299999997], [29.495949100000004, 0.41181909299999997]], [[30.02718312, 0.41181909299999997], [30.02718312, 0.928789755], [30.58841714, 0.928789755], [30.58841714, 0.41181909299999997], [30.02718312, 0.41181909299999997]], [[30.55841714, 0.41181909299999997], [30.55841714, 0.928789755], [31.11965116, 0.928789755], [31.11965116, 0.41181909299999997], [30.55841714, 0.41181909299999997]], [[31.08965116, 0.41181909299999997], [31.08965116, 0.928789755], [31.65088518, 0.928789755], [31.65088518, 0.41181909299999997], [31.08965116, 0.41181909299999997]], [[31.62088518, 0.41181909299999997], [31.62088518, 0.928789755], [32.182119199999995, 0.928789755], [32.182119199999995, 0.41181909299999997], [31.62088518, 0.41181909299999997]], [[32.152119199999994, 0.41181909299999997], [32.152119199999994, 0.928789755], [32.71335322, 0.928789755], [32.71335322, 0.41181909299999997], [32.152119199999994, 0.41181909299999997]], [[32.68335322, 0.41181909299999997], [32.68335322, 0.928789755], [33.24458724, 0.928789755], [33.24458724, 0.41181909299999997], [32.68335322, 0.41181909299999997]], [[33.21458724, 0.41181909299999997], [33.21458724, 0.928789755], [33.77582126, 0.928789755], [33.77582126, 0.41181909299999997], [33.21458724, 0.41181909299999997]], [[33.74582126, 0.41181909299999997], [33.74582126, 0.928789755], [34.30705528, 0.928789755], [34.30705528, 0.41181909299999997], [33.74582126, 0.41181909299999997]], [[34.27705528, 0.41181909299999997], [34.27705528, 0.928789755], [34.8382893, 0.928789755], [34.8382893, 0.41181909299999997], [34.27705528, 0.41181909299999997]], [[30.02718312, 0.898789755], [30.02718312, 1.4157604169999998], [30.58841714, 1.4157604169999998], [30.58841714, 0.898789755], [30.02718312, 0.898789755]], [[30.55841714, 0.898789755], [30.55841714, 1.4157604169999998], [31.11965116, 1.4157604169999998], [31.11965116, 0.898789755], [30.55841714, 0.898789755]], [[31.08965116, 0.898789755], [31.08965116, 1.4157604169999998], [31.65088518, 1.4157604169999998], [31.65088518, 0.898789755], [31.08965116, 0.898789755]], [[31.62088518, 0.898789755], [31.62088518, 1.4157604169999998], [32.182119199999995, 1.4157604169999998], [32.182119199999995, 0.898789755], [31.62088518, 0.898789755]], [[32.152119199999994, 0.898789755], [32.152119199999994, 1.4157604169999998], [32.71335322, 1.4157604169999998], [32.71335322, 0.898789755], [32.152119199999994, 0.898789755]], [[32.68335322, 0.898789755], [32.68335322, 1.4157604169999998], [33.24458724, 1.4157604169999998], [33.24458724, 0.898789755], [32.68335322, 0.898789755]], [[33.21458724, 0.898789755], [33.21458724, 1.4157604169999998], [33.77582126, 1.4157604169999998], [33.77582126, 0.898789755], [33.21458724, 0.898789755]], [[33.74582126, 0.898789755], [33.74582126, 1.4157604169999998], [34.30705528, 1.4157604169999998], [34.30705528, 0.898789755], [33.74582126, 0.898789755]], [[34.27705528, 0.898789755], [34.27705528, 1.4157604169999998], [34.8382893, 1.4157604169999998], [34.8382893, 0.898789755], [34.27705528, 0.898789755]], [[34.8082893, 0.898789755], [34.8082893, 1.4157604169999998], [35.36952332, 1.4157604169999998], [35.36952332, 0.898789755], [34.8082893, 0.898789755]], [[30.55841714, 1.385760417], [30.55841714, 1.902731079], [31.11965116, 1.902731079], [31.11965116, 1.385760417], [30.55841714, 1.385760417]], [[31.08965116, 1.385760417], [31.08965116, 1.902731079], [31.65088518, 1.902731079], [31.65088518, 1.385760417], [31.08965116, 1.385760417]], [[31.62088518, 1.385760417], [31.62088518, 1.902731079], [32.182119199999995, 1.902731079], [32.182119199999995, 1.385760417], [31.62088518, 1.385760417]], [[32.152119199999994, 1.385760417], [32.152119199999994, 1.902731079], [32.71335322, 1.902731079], [32.71335322, 1.385760417], [32.152119199999994, 1.385760417]], [[32.68335322, 1.385760417], [32.68335322, 1.902731079], [33.24458724, 1.902731079], [33.24458724, 1.385760417], [32.68335322, 1.385760417]], [[33.21458724, 1.385760417], [33.21458724, 1.902731079], [33.77582126, 1.902731079], [33.77582126, 1.385760417], [33.21458724, 1.385760417]], [[33.74582126, 1.385760417], [33.74582126, 1.902731079], [34.30705528, 1.902731079], [34.30705528, 1.385760417], [33.74582126, 1.385760417]], [[34.27705528, 1.385760417], [34.27705528, 1.902731079], [34.8382893, 1.902731079], [34.8382893, 1.385760417], [34.27705528, 1.385760417]], [[34.8082893, 1.385760417], [34.8082893, 1.902731079], [35.36952332, 1.902731079], [35.36952332, 1.385760417], [34.8082893, 1.385760417]], [[30.55841714, 1.8727310790000002], [30.55841714, 2.389701741], [31.11965116, 2.389701741], [31.11965116, 1.8727310790000002], [30.55841714, 1.8727310790000002]], [[31.08965116, 1.8727310790000002], [31.08965116, 2.389701741], [31.65088518, 2.389701741], [31.65088518, 1.8727310790000002], [31.08965116, 1.8727310790000002]], [[31.62088518, 1.8727310790000002], [31.62088518, 2.389701741], [32.182119199999995, 2.389701741], [32.182119199999995, 1.8727310790000002], [31.62088518, 1.8727310790000002]], [[32.152119199999994, 1.8727310790000002], [32.152119199999994, 2.389701741], [32.71335322, 2.389701741], [32.71335322, 1.8727310790000002], [32.152119199999994, 1.8727310790000002]], [[32.68335322, 1.8727310790000002], [32.68335322, 2.389701741], [33.24458724, 2.389701741], [33.24458724, 1.8727310790000002], [32.68335322, 1.8727310790000002]], [[33.21458724, 1.8727310790000002], [33.21458724, 2.389701741], [33.77582126, 2.389701741], [33.77582126, 1.8727310790000002], [33.21458724, 1.8727310790000002]], [[33.74582126, 1.8727310790000002], [33.74582126, 2.389701741], [34.30705528, 2.389701741], [34.30705528, 1.8727310790000002], [33.74582126, 1.8727310790000002]], [[34.27705528, 1.8727310790000002], [34.27705528, 2.389701741], [34.8382893, 2.389701741], [34.8382893, 1.8727310790000002], [34.27705528, 1.8727310790000002]], [[34.8082893, 1.8727310790000002], [34.8082893, 2.389701741], [35.36952332, 2.389701741], [35.36952332, 1.8727310790000002], [34.8082893, 1.8727310790000002]], [[30.55841714, 2.359701741], [30.55841714, 2.876672403], [31.11965116, 2.876672403], [31.11965116, 2.359701741], [30.55841714, 2.359701741]], [[31.08965116, 2.359701741], [31.08965116, 2.876672403], [31.65088518, 2.876672403], [31.65088518, 2.359701741], [31.08965116, 2.359701741]], [[31.62088518, 2.359701741], [31.62088518, 2.876672403], [32.182119199999995, 2.876672403], [32.182119199999995, 2.359701741], [31.62088518, 2.359701741]], [[32.152119199999994, 2.359701741], [32.152119199999994, 2.876672403], [32.71335322, 2.876672403], [32.71335322, 2.359701741], [32.152119199999994, 2.359701741]], [[32.68335322, 2.359701741], [32.68335322, 2.876672403], [33.24458724, 2.876672403], [33.24458724, 2.359701741], [32.68335322, 2.359701741]], [[33.21458724, 2.359701741], [33.21458724, 2.876672403], [33.77582126, 2.876672403], [33.77582126, 2.359701741], [33.21458724, 2.359701741]], [[33.74582126, 2.359701741], [33.74582126, 2.876672403], [34.30705528, 2.876672403], [34.30705528, 2.359701741], [33.74582126, 2.359701741]], [[34.27705528, 2.359701741], [34.27705528, 2.876672403], [34.8382893, 2.876672403], [34.8382893, 2.359701741], [34.27705528, 2.359701741]], [[34.8082893, 2.359701741], [34.8082893, 2.876672403], [35.36952332, 2.876672403], [35.36952332, 2.359701741], [34.8082893, 2.359701741]], [[30.55841714, 2.846672403], [30.55841714, 3.363643065], [31.11965116, 3.363643065], [31.11965116, 2.846672403], [30.55841714, 2.846672403]], [[31.08965116, 2.846672403], [31.08965116, 3.363643065], [31.65088518, 3.363643065], [31.65088518, 2.846672403], [31.08965116, 2.846672403]], [[31.62088518, 2.846672403], [31.62088518, 3.363643065], [32.182119199999995, 3.363643065], [32.182119199999995, 2.846672403], [31.62088518, 2.846672403]], [[32.152119199999994, 2.846672403], [32.152119199999994, 3.363643065], [32.71335322, 3.363643065], [32.71335322, 2.846672403], [32.152119199999994, 2.846672403]], [[32.68335322, 2.846672403], [32.68335322, 3.363643065], [33.24458724, 3.363643065], [33.24458724, 2.846672403], [32.68335322, 2.846672403]], [[33.21458724, 2.846672403], [33.21458724, 3.363643065], [33.77582126, 3.363643065], [33.77582126, 2.846672403], [33.21458724, 2.846672403]], [[33.74582126, 2.846672403], [33.74582126, 3.363643065], [34.30705528, 3.363643065], [34.30705528, 2.846672403], [33.74582126, 2.846672403]], [[34.27705528, 2.846672403], [34.27705528, 3.363643065], [34.8382893, 3.363643065], [34.8382893, 2.846672403], [34.27705528, 2.846672403]], [[30.55841714, 3.333643065], [30.55841714, 3.850613727], [31.11965116, 3.850613727], [31.11965116, 3.333643065], [30.55841714, 3.333643065]], [[31.08965116, 3.333643065], [31.08965116, 3.850613727], [31.65088518, 3.850613727], [31.65088518, 3.333643065], [31.08965116, 3.333643065]], [[31.62088518, 3.333643065], [31.62088518, 3.850613727], [32.182119199999995, 3.850613727], [32.182119199999995, 3.333643065], [31.62088518, 3.333643065]], [[32.152119199999994, 3.333643065], [32.152119199999994, 3.850613727], [32.71335322, 3.850613727], [32.71335322, 3.333643065], [32.152119199999994, 3.333643065]], [[32.68335322, 3.333643065], [32.68335322, 3.850613727], [33.24458724, 3.850613727], [33.24458724, 3.333643065], [32.68335322, 3.333643065]], [[33.21458724, 3.333643065], [33.21458724, 3.850613727], [33.77582126, 3.850613727], [33.77582126, 3.333643065], [33.21458724, 3.333643065]], [[33.74582126, 3.333643065], [33.74582126, 3.850613727], [34.30705528, 3.850613727], [34.30705528, 3.333643065], [33.74582126, 3.333643065]], [[34.27705528, 3.333643065], [34.27705528, 3.850613727], [34.8382893, 3.850613727], [34.8382893, 3.333643065], [34.27705528, 3.333643065]], [[32.68335322, 3.8206137269999996], [32.68335322, 4.337584389], [33.24458724, 4.337584389], [33.24458724, 3.8206137269999996], [32.68335322, 3.8206137269999996]], [[33.21458724, 3.8206137269999996], [33.21458724, 4.337584389], [33.77582126, 4.337584389], [33.77582126, 3.8206137269999996], [33.21458724, 3.8206137269999996]], [[33.74582126, 3.8206137269999996], [33.74582126, 4.337584389], [34.30705528, 4.337584389], [34.30705528, 3.8206137269999996], [33.74582126, 3.8206137269999996]]]

print(wkt_liste)

'''
    This part is designed by Johanna Kauffert
    It loops over the list of coordinates and finds all images in the given time frame 
    with a certain percentage of cloudcover, atmospherically corrects the images
    and saves the mosaic to teh drive
    '''
rerun = [70,71,72,74,75,79,82,86,87,88,89]
globalcount = 0
for iwkt in wkt_liste:
    if globalcount in rerun:
        #transfer coordinates to GEE Coordinates
        geom= ee.Geometry.Polygon(iwkt)
        #Find images in the time frame, geometry and given cloud cover
        collection = (ee.ImageCollection("COPERNICUS/S2")
                  # Filter for images within a given date range.
                  .filter(ee.Filter.date('2015-10-28', '2016-12-28'))
                  # Filter for images that overlap with the assigned geometry.
                  .filterBounds(geom)
                  # Filter for images that have less then 15% cloud coverage.
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
                )
        # make a dictionary with infos of the collection
        coll_dict = collection.getInfo()
        info = coll_dict["properties"]
        features = coll_dict["features"]
        listID = []
        #loop over all features in the dict
        for i in range(len(features)):
          #dont use more than 30 images
          if i < 50:
              #save the name of the image in a list
              p = features[i]['properties']['system:index']
              print(p)
              listID.append(p)
        print("Appeneded all to the list")
        
        output_list = [] #create new image collection
        # loop over all images of the list and apply atmospheric correction
        counter = 0
        for m in listID:
            S2 = ee.Image(f'COPERNICUS/S2/{m}')
            toa = S2.divide(10000)
            info = S2.getInfo()['properties']
            date = ee.Date(datetime.datetime.utcfromtimestamp(info['system:time_start']/1000))
            #print(date)


            ### Credits to SAM MURPHY ####
            scene_date = datetime.datetime.utcfromtimestamp(info['system:time_start']/1000)# i.e. Python uses seconds, EE uses milliseconds
            #print(scene_date)
            solar_z = info['MEAN_SOLAR_ZENITH_ANGLE']
            h2o = Atmospheric.water(geom,date).getInfo()
            o3 = Atmospheric.ozone(geom,date).getInfo()
            aot = Atmospheric.aerosol(geom,date).getInfo()
            SRTM = ee.Image('CGIAR/SRTM90_V4')# Shuttle Radar Topography mission covers *most* of the Earth
            alt = SRTM.reduceRegion(reducer = ee.Reducer.mean(),geometry = geom.centroid()).get('elevation').getInfo()
            km = alt/1000 # i.e. Py6S uses units of kilometers
            s = SixS()

            # Atmospheric constituents
            s.atmos_profile = AtmosProfile.UserWaterAndOzone(h2o,o3)
            s.aero_profile = AeroProfile.Continental
            s.aot550 = aot

            # Earth-Sun-satellite geometry
            s.geometry = Geometry.User()
            s.geometry.view_z = 0               # always NADIR (I think..)
            s.geometry.solar_z = solar_z        # solar zenith angle
            s.geometry.month = scene_date.month # month and day used for Earth-Sun distance
            s.geometry.day = scene_date.day     # month and day used for Earth-Sun distance
            s.altitudes.set_sensor_satellite_level()
            s.altitudes.set_target_custom_altitude(km)
            output = S2.select('QA60')
            for band in ['B1','B2','B3','B4','B5','B6','B7','B8','B8A','B9','B10','B11','B12']:
                output = output.addBands(surface_reflectance(band))
            # append now the corrected images to a new list
            output_list.append(output)
            counter += 1
            print(f'Processed Image: {counter}, Name: {m}')
        # make a new image collection from the list and the corrected images
        coll = ee.ImageCollection(output_list)

        #and have a first look at the first image of the collection
        channels = ['B4','B3','B2']
        first_look = ee.Image(
          ee.ImageCollection(output_list) 
              .first()
          )

        original = Image(url=first_look.select(channels).getThumbUrl({
                        'scale':100,
                        'min':0,
                        'max':0.25
                        }))
        display(original)
        my_dict = coll.getInfo()
        # apply a cloud mask to the image
        cloudfree = (ee.ImageCollection(output_list)
                  .filterBounds(geom)
                  #.select(['B4', 'B3', 'B2', 'QA60'])
                  .map(sentinel2mask)
                )
        # only select the bands, that are important for the research
        cloudfree2 = (ee.ImageCollection(cloudfree)
                      #.sort('CLOUDY_PIXEL_PERCENTAGE', opt_ascending=False)
                      .select(['B4', 'B3', 'B2','B8','B11'])
                      )
        #calcualte the median
        cloudfree3 = cloudfree2.median()
        #Alternative way:
        #cloudfreeimage = cloudfree2.sort('system:index', opt_ascending=False).mosaic()
        
        ### Save the image to the folder 
        print(f"Geomtrie:  {globalcount}")
        
        task_config = {
            'region': geom,
            'folder': 'Sentinel2',
            'scale': 10,
            'crs': 'EPSG:21036',
            'description': f'UgandaS2_R{globalcount}'
        }

        # Export Image
        task = ee.batch.Export.image.toDrive(cloudfree3, **task_config)
        task.start()
        task.status()
    globalcount += 1